# ---- begin snakebids boilerplate ----------------------------------------------

from snakebids import bids, filter_list, generate_inputs, get_wildcard_constraints


configfile: "config/snakebids.yml"


# writes inputs_config.yml and updates config dict
inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_config=["bids", "derivatives"],
    pybidsdb_dir=config.get("pybidsdb_dir"),
    pybidsdb_reset=config.get("pybidsdb_reset"),
    derivatives=config["derivatives"],
    participant_label=config["participant_label"],
    exclude_participant_label=config["exclude_participant_label"],
)


# this adds constraints to the bids naming
wildcard_constraints:
    **get_wildcard_constraints(config["pybids_inputs"]),


# ---- end snakebids boilerplate ------------------------------------------------
from pathlib import Path

from niwrap import ants, fsl, use_singularity


Path(config["output_dir"]).mkdir(parents=True, exist_ok=True)


def setup_runner() -> None:
    """Setup runner as function in case for parallelization across nodes.
    """
    use_singularity(
        images={
            "brainlife/fsl:6.0.4-patched2": config["containers"]["fsl"],
            "antsx/ants:v2.5.3": config["containers"]["ants"]
        }
    )


rule anat_wf:
    input:
        t1w = inputs["T1w"].path
    params:
        fractional_intensity = config.get("bet_fractional_intensity")
    output:
        n4 = Path(config["output_dir"]) / bids(
            datatype="anat",
            desc="N4",
            suffix="T1w",
            extension=".nii.gz",
            **inputs.subj_wildcards
        )
    run:
        setup_runner()

        # FSL Bet
        bet = fsl.bet(
            infile=input.t1w,
            fractional_intensity=params.fractional_intensity
        )

        # ANTs N4 Correction
        ants.n4_bias_field_correction(
            input_image=bet.outfile,
            image_dimensionality=3,
            corrected_image_path=output.n4
        )

rule all:
    input:
        inputs["T1w"].expand(rules.anat_wf.output.n4)