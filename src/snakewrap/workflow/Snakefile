# ---- begin snakebids boilerplate ----------------------------------------------

from snakebids import bids, filter_list, generate_inputs, get_wildcard_constraints


configfile: "config/snakebids.yml"


# writes inputs_config.yml and updates config dict
inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybids_config=["bids", "derivatives"],
    pybidsdb_dir=config.get("pybidsdb_dir"),
    pybidsdb_reset=config.get("pybidsdb_reset"),
    derivatives=config["derivatives"],
    participant_label=config["participant_label"],
    exclude_participant_label=config["exclude_participant_label"],
)


# this adds constraints to the bids naming
wildcard_constraints:
    **get_wildcard_constraints(config["pybids_inputs"]),


# ---- end snakebids boilerplate ------------------------------------------------
from pathlib import Path

import niwrap_helper
from niwrap import fsl

_, runner = niwrap_helper.setup_styx(
    image_map=config["containers"],
    runner="singularity"
)
Path(config["output_dir"]).mkdir(parents=True, exist_ok=True)

rule bet:
    input:
        t1w = inputs["T1w"].path
    params:
        fractional_intensity = config.get("bet_fractional_intensity")
    output:
        brain = Path(config["output_dir"]) / bids(
            datatype="anat",
            desc="brain",
            suffix="T1w",
            extension=".nii.gz",
            **inputs.subj_wildcards
        )
    run:
        fsl.bet(
            infile=input.t1w,
            maskfile=output.brain.strip(".nii.gz"), 
            fractional_intensity=params.fractional_intensity
        )

rule all:
    input:
        inputs["T1w"].expand(rules.bet.output.brain)